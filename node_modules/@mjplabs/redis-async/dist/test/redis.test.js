"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var redis_1 = require("../src/redis");
var redis = require("redis");
var redisMock = require("redis-mock");
jest.spyOn(redis, 'createClient').mockImplementation(redisMock.createClient);
var client;
beforeEach(function () {
    client = redis_1.createAsyncClient();
});
afterEach(function (done) {
    client.flushall(function () { done(); });
});
test('runMultiple works as expected', function () { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, client.runMultiple(function (m) { return m
                    .set('key1', 'val1')
                    .set('key2', 'val2'); })];
            case 1:
                _a.sent();
                return [4 /*yield*/, client.runMultiple(function (m) { return m
                        .get('key1')
                        .get('key2'); })];
            case 2:
                result = _a.sent();
                expect(result).toEqual(['val1', 'val2']);
                return [2 /*return*/];
        }
    });
}); });
test('runSingle works as expected', function () { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, client.runSingle(function (m) { return m.set('key1', 'val1'); })];
            case 1:
                _a.sent();
                return [4 /*yield*/, client.runSingle(function (m) { return m.get('key1'); })];
            case 2:
                result = _a.sent();
                expect(result).toEqual('val1');
                return [2 /*return*/];
        }
    });
}); });
test('runMultipleInDb works as expected', function () { return __awaiter(void 0, void 0, void 0, function () {
    var db2Result, db0Result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, client.runMultipleInDb(2, function (m) { return m
                    .set('key1', '2_1')
                    .set('key2', '2_2'); })];
            case 1:
                _a.sent();
                return [4 /*yield*/, client.runMultipleInDb(0, function (m) { return m
                        .set('key1', '0_1')
                        .set('key2', '0_2'); })];
            case 2:
                _a.sent();
                return [4 /*yield*/, client.runMultipleInDb(2, function (m) { return m
                        .get('key1')
                        .get('key2'); })];
            case 3:
                db2Result = _a.sent();
                expect(db2Result).toEqual(['2_1', '2_2']);
                return [4 /*yield*/, client.runMultipleInDb(0, function (m) { return m
                        .get('key1')
                        .get('key2'); })];
            case 4:
                db0Result = _a.sent();
                expect(db0Result).toEqual(['0_1', '0_2']);
                return [2 /*return*/];
        }
    });
}); });
test('runInDb works as expected', function () { return __awaiter(void 0, void 0, void 0, function () {
    var goodResult, badResult;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, client.runInDb(3, function (m) { return m.set('key', 'val'); })];
            case 1:
                _a.sent();
                return [4 /*yield*/, client.runInDb(3, function (m) { return m.get('key'); })];
            case 2:
                goodResult = _a.sent();
                expect(goodResult).toEqual('val');
                return [4 /*yield*/, client.runInDb(0, function (m) { return m.get('key'); })];
            case 3:
                badResult = _a.sent();
                expect(badResult).toBeNull();
                return [2 /*return*/];
        }
    });
}); });
test('getAllKeys works as expected', function () { return __awaiter(void 0, void 0, void 0, function () {
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, client.runMultipleInDb(2, function (m) { return m
                    .set('key1', 'val1')
                    .set('key2', 'val2')
                    .set('key3', 'val3')
                    .set('key4', 'val4'); })];
            case 1:
                _b.sent();
                _a = expect;
                return [4 /*yield*/, client.getAllKeys(2)];
            case 2:
                _a.apply(void 0, [_b.sent()]).toEqual(['key1', 'key2', 'key3', 'key4']);
                return [2 /*return*/];
        }
    });
}); });
